// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file.proto

#include "file.pb.h"
#include "file.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace file {

static const char* FileService_method_names[] = {
  "/file.FileService/Upload",
  "/file.FileService/Download",
  "/file.FileService/Delete",
};

std::unique_ptr< FileService::Stub> FileService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileService::Stub> stub(new FileService::Stub(channel, options));
  return stub;
}

FileService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Upload_(FileService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Download_(FileService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(FileService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileService::Stub::Upload(::grpc::ClientContext* context, const ::file::UploadRequest& request, ::file::UploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::file::UploadRequest, ::file::UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Upload_, context, request, response);
}

void FileService::Stub::async::Upload(::grpc::ClientContext* context, const ::file::UploadRequest* request, ::file::UploadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::file::UploadRequest, ::file::UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, request, response, std::move(f));
}

void FileService::Stub::async::Upload(::grpc::ClientContext* context, const ::file::UploadRequest* request, ::file::UploadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::file::UploadResponse>* FileService::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, const ::file::UploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::file::UploadResponse, ::file::UploadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Upload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::file::UploadResponse>* FileService::Stub::AsyncUploadRaw(::grpc::ClientContext* context, const ::file::UploadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileService::Stub::Download(::grpc::ClientContext* context, const ::file::DownloadRequest& request, ::file::DownloadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::file::DownloadRequest, ::file::DownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Download_, context, request, response);
}

void FileService::Stub::async::Download(::grpc::ClientContext* context, const ::file::DownloadRequest* request, ::file::DownloadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::file::DownloadRequest, ::file::DownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, response, std::move(f));
}

void FileService::Stub::async::Download(::grpc::ClientContext* context, const ::file::DownloadRequest* request, ::file::DownloadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Download_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::file::DownloadResponse>* FileService::Stub::PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::file::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::file::DownloadResponse, ::file::DownloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Download_, context, request);
}

::grpc::ClientAsyncResponseReader< ::file::DownloadResponse>* FileService::Stub::AsyncDownloadRaw(::grpc::ClientContext* context, const ::file::DownloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileService::Stub::Delete(::grpc::ClientContext* context, const ::file::DeleteRequest& request, ::file::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::file::DeleteRequest, ::file::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void FileService::Stub::async::Delete(::grpc::ClientContext* context, const ::file::DeleteRequest* request, ::file::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::file::DeleteRequest, ::file::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void FileService::Stub::async::Delete(::grpc::ClientContext* context, const ::file::DeleteRequest* request, ::file::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::file::DeleteResponse>* FileService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::file::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::file::DeleteResponse, ::file::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::file::DeleteResponse>* FileService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::file::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

FileService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileService::Service, ::file::UploadRequest, ::file::UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::file::UploadRequest* req,
             ::file::UploadResponse* resp) {
               return service->Upload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileService::Service, ::file::DownloadRequest, ::file::DownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::file::DownloadRequest* req,
             ::file::DownloadResponse* resp) {
               return service->Download(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileService::Service, ::file::DeleteRequest, ::file::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::file::DeleteRequest* req,
             ::file::DeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
}

FileService::Service::~Service() {
}

::grpc::Status FileService::Service::Upload(::grpc::ServerContext* context, const ::file::UploadRequest* request, ::file::UploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileService::Service::Download(::grpc::ServerContext* context, const ::file::DownloadRequest* request, ::file::DownloadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileService::Service::Delete(::grpc::ServerContext* context, const ::file::DeleteRequest* request, ::file::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace file

